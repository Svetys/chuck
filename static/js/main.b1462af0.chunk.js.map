{"version":3,"sources":["SearchBox.js","Random.js","FullList.js","Loading.js","SearchList.js","FactButton.js","App.js","serviceWorker.js","index.js"],"names":["SearchBox","searchChange","className","type","placeholder","onChange","Random","value","FullList","fullList","map","el","key","id","Loading","SearchList","list","phrase","searchfield","length","FactButton","click","onClick","App","randomFact","setState","searchlist","fetch","then","resp","json","onSearchChange","event","target","result","state","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6QAUeA,EARG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACpB,OACC,yBAAKC,UAAU,UACf,2BAAOC,KAAK,SAASD,UAAU,aAAaE,YAAY,eAAeC,SAAUJ,MCCpEK,EAJA,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAChB,OAAQ,4BAAKA,ICMAC,EANE,SAAC,GAChB,OADiC,EAAfC,SACDC,KAAI,SAACC,GACrB,OAAO,kBAAC,EAAD,CAAQJ,MAAOI,EAAGJ,MAAOK,IAAKD,EAAGE,SCoB5BC,G,MAtBC,WACf,OACC,yBAAKZ,UAAU,yCACf,yBAAKA,UAAU,oBACf,8BACA,8BACA,8BACA,8BACA,8BACA,8BACA,8BACA,8BACA,8BACA,8BACA,8BACA,kCCYaa,EA1BI,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,KAAMC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,YACnC,OAAIF,EAAKG,OACA,6BACP,4BACA,kBAAC,EAAD,CAAUV,SAAUO,MAOXE,EAAYC,OAAS,EACxB,kBAAC,EAAD,MACGF,EAAOE,OAAS,EAEzB,6BACA,iDACA,2BAAIF,IAKE,sEChBMG,EARI,SAAC,GAAa,IAAZC,EAAW,EAAXA,MACnB,OACE,yBAAKnB,UAAU,iBACb,4BAAQA,UAAU,cAAcoB,QAASD,GAAzC,eCsDSE,G,wDApDb,aAAe,IAAD,8BACZ,gBAQFC,WAAa,WACX,EAAKC,SAAS,CAACP,YAAa,MAC5B,EAAKO,SAAS,CAAEC,WAAY,KAC5B,EAAKD,SAAS,CAAER,OAAQ,KACxBU,MAAM,2CACLC,MAAK,SAACC,GAAD,OAAUA,EAAKC,UACpBF,MAAK,SAACC,GACL,EAAKJ,SAAS,CAAER,OAAQY,EAAKtB,QAC7B,EAAKkB,SAAS,CAACP,YAAa,SAjBlB,EAqBda,eAAiB,SAACC,GAChB,IAAMzB,EAAQyB,EAAMC,OAAO1B,MACvBA,EAAMY,OAAS,EACjBQ,MAAM,iDAAD,OAC8CpB,IAElDqB,MAAK,SAACC,GAAD,OAAUA,EAAKC,UACpBF,MAAK,SAACC,GAAD,OAAU,EAAKJ,SAAS,CAAEC,WAAYG,EAAKK,aAEjD,EAAKT,SAAS,CAAEC,WAAY,KAC5B,EAAKD,SAAS,CAAER,OAAQ,MAE1B,EAAKQ,SAAS,CAACP,YAAaX,KA/B5B,EAAK4B,MAAQ,CACXlB,OAAQ,GACRC,YAAa,GACbQ,WAAY,IALF,E,qDAqCZ,OACE,6BACA,yBAAKxB,UAAU,UACf,mDACA,kBAAC,EAAD,CAAYmB,MAAOe,KAAKZ,aACxB,kBAAC,EAAD,CAAWvB,aAAcmC,KAAKL,kBAE9B,yBAAK7B,UAAU,UACf,kBAAC,EAAD,CAAYc,KAAMoB,KAAKD,MAAMT,WAAYT,OAAQmB,KAAKD,MAAMlB,OAASC,YAAakB,KAAKD,MAAMjB,oB,GA9CjFmB,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b1462af0.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n\treturn (\r\n\t\t<div className=\"search\">\r\n\t\t<input type=\"search\" className=\"searchTerm\" placeholder=\"Search facts\" onChange={searchChange} />\r\n\t\t</div>\r\n\t\t);\r\n};\r\n\r\nexport default SearchBox;\r\n\r\n\r\n","import React from \"react\";\r\n\r\nconst Random = ({ value }) => {\r\n  return  <li>{value}</li>\r\n};\r\n\r\nexport default Random;\r\n","import React from \"react\";\r\nimport Random from \"./Random\";\r\n\r\nconst FullList = ({ fullList }) => {\r\n  return  fullList.map((el) => {\r\n\t\t\treturn <Random value={el.value} key={el.id} />;\r\n\t\t});\r\n};\r\n\r\nexport default FullList;\r\n","import React from \"react\";\r\nimport \"./Loading.css\"\r\n\r\nconst Loading = () => {\r\n\treturn (\r\n\t\t<div className=\"loadingio-spinner-spinner-5h41t4an54n\">\r\n\t\t<div className=\"ldio-4qzt165fpul\">\r\n\t\t<div></div>\r\n\t\t<div></div>\r\n\t\t<div></div>\r\n\t\t<div></div>\r\n\t\t<div></div>\r\n\t\t<div></div>\r\n\t\t<div></div>\r\n\t\t<div></div>\r\n\t\t<div></div>\r\n\t\t<div></div>\r\n\t\t<div></div>\r\n\t\t<div></div>\r\n\t\t</div>\r\n\t\t</div>\r\n\t\t)\r\n\t\r\n}\r\n\r\nexport default Loading;","import React from \"react\";\r\nimport FullList from \"./FullList\";\r\nimport Loading from \"./Loading\";\r\n\r\nconst SearchList = ({ list, phrase, searchfield }) => {\r\n\tif (list.length) {\r\n\t\treturn (<div>\r\n\t\t\t<ol>\r\n\t\t\t<FullList fullList={list} />\r\n\t\t\t</ol>\r\n\t\t\t</div>\r\n\t\t\t)\r\n\t\t// return list.map((el) => {\r\n\t\t// \treturn <Random value={el.value} key={el.id} />;\r\n\t\t// });\r\n\t} else if (searchfield.length > 0) {\r\n\t\treturn <Loading />\r\n\t} else if (phrase.length > 0) {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t<h3>Your random fact:</h3>\r\n\t\t\t<p>{phrase}</p>\r\n\t\t\t</div>\r\n\t\t\t)\r\n\t}\r\n\telse {\r\n\t\treturn <p>Search or Generate Chuck Norris Facts!</p>\r\n\t}\r\n};\r\n\r\nexport default SearchList;\r\n","import React from \"react\";\r\n\r\nconst FactButton = ({click}) => {\r\n  return (\r\n    <div className=\"generateField\">\r\n      <button className=\"generateBtn\" onClick={click}>Generate!</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FactButton;\r\n","import React, { Component } from \"react\";\nimport SearchBox from \"./SearchBox\";\nimport SearchList from \"./SearchList\";\nimport FactButton from \"./FactButton\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      phrase: \"\",\n      searchfield: \"\",\n      searchlist: [],\n    };\n  }\n\n  randomFact = () => {\n    this.setState({searchfield: '1'});\n    this.setState({ searchlist: [] });\n    this.setState({ phrase: '' });\n    fetch(\"https://api.chucknorris.io/jokes/random\")\n    .then((resp) => resp.json())\n    .then((resp) => {\n      this.setState({ phrase: resp.value });\n      this.setState({searchfield: ''});\n    })\n  };\n\n  onSearchChange = (event) => {\n    const value = event.target.value;\n    if (value.length > 2) {\n      fetch(\n        `https://api.chucknorris.io/jokes/search?query=${value}`\n        )\n      .then((resp) => resp.json())\n      .then((resp) => this.setState({ searchlist: resp.result }));\n    } else {\n      this.setState({ searchlist: [] });\n      this.setState({ phrase: '' });\n    }\n    this.setState({searchfield: value});\n  };\n\n  render() {\n    return (\n      <div>\n      <div className=\"header\">\n      <h1>Chuck Norris Facts!</h1>\n      <FactButton click={this.randomFact} />\n      <SearchBox searchChange={this.onSearchChange} />\n      </div>\n      <div className=\"scroll\" >\n      <SearchList list={this.state.searchlist} phrase={this.state.phrase}  searchfield={this.state.searchfield} />\n      </div>\n      </div>\n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}